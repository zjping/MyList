/*
 * 实现一个list类命名为MyList，其功能与python数组类似。可以用数组实现，也可以用链表实现。
 * 必须使用template <class T>，不允许使用<iostream>以外的库。
 * 需要实现的功能与测试代码见下。请务必搞清楚每一项的意义，比如什么时候需要用友元函数什么时候需要const什么时候需要&。
 * 当某些由用户正常操作可能产生的run time error（如pop一个空数组，或访问一个超出下标的元素），
 * 请使用try-catch-throw处理错误。
 * 以下类定义不保证完全正确，请根据实际需求修改，以实现样例功能为主。
 */

/* 
 * 本练习不涉及到虚类和类继承，但是期末考试我就不知道了。如果有时间可以用书上的shape类来练习。
 */

#include<iostream>
using namespace std;

template<class T>
class MyList{
private:
	T *a;
	int size;
	
	
	void double_space()//数组大小不够的时候将数组大小翻倍的操作。 
	{
		T *b;
		b = new T [2*size];
		for(int i=0;i<size;++i)
		{
			b[i] = a[i];
		}
		delete [] a;
		a=b;
	} 
	
	
public:
	
	
	MyList(){
		size = 100;
		a = new T [size];
	}
	
	
	MyList(int num, const T &item)//将item重复num次填入数组中。
	{
		if(num!=0)
		{
		size = num;
		a = new T [size];
		for(int i=0;i<num;++i)
		{
			a[i] = item;
		}}
		if(num == 0)
		{
			size = 0;
			a = new T [0];
		}
		double_space();
	}
	
	
	MyList(const MyList &l)//深复制另外一个MyList。
	{
		size = l.size;
		a = new T [size];
		for (int i=1;i<=l.size;++i)
		{
			a[i-1]=l.a[i-1];
		}
	}
    
	
	MyList(T* arr, int len)//以arr的前len个元素构造数组
    {
    	size = len;
    	a = new int [size];
    	for(int i=1;i<=len;++i)
    	{
    		a[i-1]=arr[i-1];
		}
	}

	
	
	void push(const T &item)//将item添加在MyList最后。
	{
		if(size == 100)
		{
			size = 0;
		}
		
		size += 1;
		a[size-1] = item;
	}
	
	
	T pop()//将MyList中最后一个元素删除，并返回这个删除的元素。
	{
		size -= 1;
		return a[size];
	}
	
	
	void insert(int index, const T &item)//将item插入到place处。
	{
		T *b;
		b = new int [size+1];
		for(int i=index;i<size;++i)
		{
			b[i] = a[i];
		}
		a[index] = item;
		size += 1;
		for(int i=index+1;i<size;++i)
		{
			a[i]=b[i-1];
		}
		delete [] b;
	}
	
	
	void clean()//清空数组。
	{
		size = 0;
		delete [] a;
		a = new int [0];
	}
	
	
	int get_size()//返回MyList中元素的数量。
	{
		return size;
	}
	
	
	void erase(int start, int end) //删除MyList中第start到第end位的元素，包括两边。
	{
		T *b;
		b = new int [size-end-1+start];
		for(int i=0;i<start;++i)
		{
			b[i] = a[i];
		}
		
		for(int i=end+1;i<size;++i)
		{
			b[start+i-end-1] = a[i];
		}
		size = size-end-1+start;
		delete [] a;
		a = b;
	}
	
	
	T & get_item(int index)//返回第index个元素。
	{
		return a[index];
	}
	
	
	
	
	
	MyList get_item(int start, int end)//返回MyList中第start到第end位的元素，包括两边。此处需要像python一样接受负数，具体见测试代码。
	{
		if(start<0)
		{
			start += size;
		}
		if(end<0)
		{
			end += size;
		}
		int length = end - start + 1;
		if(length<0 || length >size)
		{
			length = 0; 
		}
		MyList temp(length,0);
		for(int i=0;i<length;++i)
		{
			temp.a[i] = a[start+i];
		}
		return temp;
	}
	
	
	
	
	int count(const T &item)//返回MyList中和item相等的元素的个数。
	{
		int time = 0;
		for(int i=0;i<size;++i)
		{
			if(a[i]==item){
				time += 1;
			}
		}
		return time;
	}
	
	
	
	void remove(const T &item)//删除MyList中第一个和item相等的元素。
	{
		int position = size;
		for(int i=0;i<size;++i)
		{
			if(a[i]==item)
			{
				position = i;
				break;
			}
		}
		if(position != size)
		{
			erase(position,position);
		}
	}


	
	
	
	friend MyList operator + (const MyList &l1, const MyList &l2) //合并两个MyList
	{
		MyList temp(l1.size+l2.size,0);
		for(int i=0;i<l1.size;++i)
		{
			temp.a[i] = l1.a[i];
		}
		for(int i=0;i<l2.size;++i)
		{
			temp.a[l1.size+i] = l2.a[i];
		}
		return temp;
	} 
    
	
	
	friend MyList operator + (const MyList &l1, const T &item) //同push(T item)，但不修改l1，返回一个新数组
    {
    	MyList temp(l1.size+1,0);
		for(int i=0;i<l1.size;++i)
		{
			temp.a[i] = l1.a[i];
		}
		temp.a[temp.size] = item;
		return temp;
	}
	
	
	
	MyList &operator = (const MyList &l)//赋值
	{
		if(this == &l) return *this;
		delete [] a;
		size = l.size;
		a = new int [size];
		for(int i=0;i<size;++i)
		{
			a[i] = l.a[i];
		}
		return *this;
	}
	
	
	
	MyList &operator += (const T &item)//同push(T item)
	{
		size += 1;
		a[size-1] = item;
		return *this;
	}
	
	
	
	MyList &operator += (const MyList &l)//将一个MyList加入到本个MyList之后。
	{
		for(int i=0;i<l.size;++i)
		{
			a[size+i] = l.a[i];
		}
		size += l.size;
		return *this;
	}
	
	
	
	
	
	T &operator [](int index)//返回第index个元素。
	{
		return a[index];
	}
	
	
	
	
	friend ostream & operator<<(ostream &os, const MyList &obj)//如果T是可以直接cout的类的话（比如int），按Python数组的格式输出MyList中的每一个元素，例如：
    // [1, 2, 5, 4, 1]
    {
    	os << "[";
    	
    	for(int i=0;i<obj.size-1;++i)
    	{
    		os << obj.a[i] << ", ";
		}
		if(obj.size>=1)
		{
		os << obj.a[obj.size-1] << "]" <<endl;}
		else{
			os << "]";
		}
		return os;
	}
	
	
	int devide(int start,int end) 
	{
		T temp;
		temp = a[start];
		do{
			while(start < end && temp < a[end])
			{
				end--;
			}
			if(start < end)
			{
				a[start] = a[end];
				start ++;
			}
			while(start < end && temp > a[start])
			{
				start++;
			}
			if(start < end)
			{
				a[end] = a[start];
				end--;
			}
		}
		while(start != end);
		a[start] = temp;
		return start;
 	}
 	
	 
	 void reverse()//将MyList的元素倒过来。
	{
		MyList b;
		b = *this;
		for(int i=0;i<size;++i)
		{
			a[i] = b.a[size-1-i];
		}
	}
 	
	 
	 
	 void quicksort(int start,int end)
 	{
 		if(start >= end)
    		{
    			return ;
			}
    		int mid = devide(start,end);
    		quicksort(start,mid);
    		quicksort(mid+1,end);
	 }

	
	
	void sort(bool less=true)//实现一个快速排序或归并排序，对支持比较运算符（>=<）的类进行排序。
    // 若less=true，按照从小到大排列，否则按从大到小排列
    {
    	if(less == true)
    	{
    		quicksort(0,size-1);
		}
		else{
			quicksort(0,size-1);
			reverse();
		}
	}
	

	~MyList(){delete [] a;}
};


int main(){
	MyList<int> a, b;
	int i;
	for (i=0; i<5; ++i)
		a.push(i);	
     //a = [0, 1, 2, 3, 4]
	a[3] = 15; // a = [0, 1, 2, 15, 4]
	a.sort(); // a = [0, 1, 2, 4, 15]
	a.reverse(); // a = [15, 4, 2, 1, 0]
	a += 12; // a = [15, 4, 2, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
		cout<<a[i]<<endl;
    b = a.get_item(4, -3); // b = [] *若start > end，返回空数组
	b = a.get_item(3, -1); // b = [1, 0, 12] 
	a += b; // a = [15, 4, 2, 1, 0, 12, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
		cout<<a.get_item(i)<<endl;
	cout<<a.count(5)<<endl;
	b.clean(); // b = []
	cout<<b.get_size()<<endl;
	a.erase(2, 5); // a = [15, 4, 1, 0, 12]
	b = a + a; // b = [15, 4, 0, 12, 15, 4, 0, 12]
	b.insert(3, 116); // b = [15, 4, 0, 116, 12, 15, 4, 0, 12]
	b.remove(4); // b = [15, 0, 116, ...]
	cout<<b<<endl;
	MyList<double> c(10, 3.14);
	    c.push(1.1);
	for (i=0; i<100; ++i)
		c.push(1.1*i);
	cout<<c.get_item(100, 105)<<endl;
	cout << c;
    return 0;
}
